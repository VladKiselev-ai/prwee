'use client';

import { useState } from 'react';

interface AIAnalysisProps {
  articleId?: string;
  articleTitle?: string;
}

interface AnalysisData {
  article: {
    id: string;
    title: string;
    source: string;
    category?: string;
    publishedAt: string;
  };
  analysis: {
    full: string;
    structured: {
      summary: string;
      importance: number;
      sentiment: string;
      keyFacts: string[];
      impact: string;
      context: string;
      keyPlayers: string[];
      trends: string[];
      conclusions: string;
      nextSteps: string;
    };
  };
  metadata: {
    model: string;
    tokens: number;
    includeContext: boolean;
    analyzedAt: string;
  };
}

export default function AIAnalysis({ articleId, articleTitle }: AIAnalysisProps) {
  const [analysis, setAnalysis] = useState<AnalysisData | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [includeContext, setIncludeContext] = useState(true);

  const analyzeArticle = async () => {
    setLoading(true);
    setError(null);
    setAnalysis(null);

    try {
      const response = await fetch('/api/articles/analyze', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          articleId,
          includeContext
        })
      });

      const data = await response.json();

      if (data.success) {
        setAnalysis(data.data);
      } else {
        setError(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç—å–∏');
      }
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞');
    } finally {
      setLoading(false);
    }
  };

  const getSentimentColor = (sentiment: string) => {
    switch (sentiment.toLowerCase()) {
      case 'positive': return 'text-green-600 bg-green-50 border-green-200';
      case 'negative': return 'text-red-600 bg-red-50 border-red-200';
      default: return 'text-gray-600 bg-gray-50 border-gray-200';
    }
  };

  const getSentimentEmoji = (sentiment: string) => {
    switch (sentiment.toLowerCase()) {
      case 'positive': return 'üòä';
      case 'negative': return 'üòî';
      default: return 'üòê';
    }
  };

  const getImportanceColor = (importance: number) => {
    if (importance >= 8) return 'text-red-600 bg-red-50 border-red-200';
    if (importance >= 6) return 'text-yellow-600 bg-yellow-50 border-yellow-200';
    return 'text-green-600 bg-green-50 border-green-200';
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">ü§ñ AI-–∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—å–∏</h2>
          {articleTitle && (
            <p className="text-gray-600 mt-1">{articleTitle}</p>
          )}
        </div>
        
        <div className="flex items-center space-x-4">
          <label className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={includeContext}
              onChange={(e) => setIncludeContext(e.target.checked)}
              className="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span className="text-sm text-gray-700">–í–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—é</span>
          </label>
          
          <button
            onClick={analyzeArticle}
            disabled={loading}
            className="btn-primary flex items-center space-x-2"
          >
            {loading ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                <span>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</span>
              </>
            ) : (
              <>
                <span>üîç</span>
                <span>–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</span>
              </>
            )}
          </button>
        </div>
      </div>

      {/* –û—à–∏–±–∫–∞ */}
      {error && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-2">
            <span className="text-red-600">‚ùå</span>
            <span className="text-red-800 font-medium">–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</span>
          </div>
          <p className="text-red-700 mt-1">{error}</p>
          {error.includes('OPENAI_API_KEY') && (
            <div className="mt-3 p-3 bg-yellow-50 border border-yellow-200 rounded">
              <p className="text-yellow-800 text-sm">
                <strong>–†–µ—à–µ–Ω–∏–µ:</strong> –î–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env.local –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä
              </p>
            </div>
          )}
        </div>
      )}

      {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ */}
      {analysis && (
        <div className="space-y-6">
          {/* –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ */}
          <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 text-sm">
              <div>
                <span className="font-medium text-blue-800">–ú–æ–¥–µ–ª—å:</span>
                <span className="text-blue-700 ml-2">{analysis.metadata.model}</span>
              </div>
              <div>
                <span className="font-medium text-blue-800">–¢–æ–∫–µ–Ω—ã:</span>
                <span className="text-blue-700 ml-2">{analysis.metadata.tokens}</span>
              </div>
              <div>
                <span className="font-medium text-blue-800">–ö–æ–Ω—Ç–µ–∫—Å—Ç:</span>
                <span className="text-blue-700 ml-2">
                  {analysis.metadata.includeContext ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}
                </span>
              </div>
              <div>
                <span className="font-medium text-blue-800">–í—Ä–µ–º—è:</span>
                <span className="text-blue-700 ml-2">
                  {new Date(analysis.metadata.analyzedAt).toLocaleString('ru-RU')}
                </span>
              </div>
            </div>
          </div>

          {/* –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
            <div className="space-y-4">
              {/* –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ */}
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</h3>
                <p className="text-gray-700">{analysis.analysis.structured.summary}</p>
              </div>

              {/* –í–∞–∂–Ω–æ—Å—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ */}
              <div className="grid grid-cols-2 gap-4">
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">‚≠ê –í–∞–∂–Ω–æ—Å—Ç—å</h3>
                  <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getImportanceColor(analysis.analysis.structured.importance)}`}>
                    {analysis.analysis.structured.importance}/10
                  </div>
                </div>
                
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</h3>
                  <div className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium border ${getSentimentColor(analysis.analysis.structured.sentiment)}`}>
                    {getSentimentEmoji(analysis.analysis.structured.sentiment)} {analysis.analysis.structured.sentiment}
                  </div>
                </div>
              </div>

              {/* –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã */}
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã</h3>
                <ul className="space-y-2">
                  {analysis.analysis.structured.keyFacts.map((fact, index) => (
                    <li key={index} className="flex items-start space-x-2">
                      <span className="text-primary-600 mt-1">‚Ä¢</span>
                      <span className="text-gray-700">{fact}</span>
                    </li>
                  ))}
                </ul>
              </div>

              {/* –í–ª–∏—è–Ω–∏–µ */}
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">üåç –í–ª–∏—è–Ω–∏–µ</h3>
                <p className="text-gray-700">{analysis.analysis.structured.impact}</p>
              </div>
            </div>

            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ */}
            <div className="space-y-4">
              {/* –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è */}
              {analysis.metadata.includeContext && (
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">üìö –ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è</h3>
                  <p className="text-gray-700">{analysis.analysis.structured.context}</p>
                </div>
              )}

              {/* –ö–ª—é—á–µ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ */}
              {analysis.analysis.structured.keyPlayers.length > 0 && (
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">üë• –ö–ª—é—á–µ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</h3>
                  <ul className="space-y-1">
                    {analysis.analysis.structured.keyPlayers.map((player, index) => (
                      <li key={index} className="text-gray-700">‚Ä¢ {player}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* –¢—Ä–µ–Ω–¥—ã */}
              {analysis.analysis.structured.trends.length > 0 && (
                <div className="card">
                  <h3 className="text-lg font-semibold text-gray-900 mb-3">üìà –¢—Ä–µ–Ω–¥—ã</h3>
                  <ul className="space-y-1">
                    {analysis.analysis.structured.trends.map((trend, index) => (
                      <li key={index} className="text-gray-700">‚Ä¢ {trend}</li>
                    ))}
                  </ul>
                </div>
              )}

              {/* –í—ã–≤–æ–¥—ã */}
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">üí° –í—ã–≤–æ–¥—ã</h3>
                <p className="text-gray-700">{analysis.analysis.structured.conclusions}</p>
              </div>

              {/* –ß—Ç–æ –¥–∞–ª—å—à–µ */}
              <div className="card">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">üîÆ –ß—Ç–æ –¥–∞–ª—å—à–µ</h3>
                <p className="text-gray-700">{analysis.analysis.structured.nextSteps}</p>
              </div>
            </div>
          </div>

          {/* –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ */}
          <div className="card">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">üìä –ü–æ–ª–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑</h3>
            <div className="prose prose-sm max-w-none">
              <div 
                className="text-gray-700 whitespace-pre-wrap"
                dangerouslySetInnerHTML={{ 
                  __html: analysis.analysis.full.replace(/\n/g, '<br>') 
                }}
              />
            </div>
          </div>
        </div>
      )}

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è */}
      {!analysis && !loading && !error && (
        <div className="card">
          <div className="text-center py-8">
            <div className="text-6xl mb-4">ü§ñ</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              AI-–∞–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç–µ–π
            </h3>
            <p className="text-gray-600 mb-4 max-w-md mx-auto">
              –ü–æ–ª—É—á–∏—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª—é–±–æ–π —Å—Ç–∞—Ç—å–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º, –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–µ–π –∏ –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ–±—ã—Ç–∏–π
            </p>
            <div className="space-y-2 text-sm text-gray-500">
              <p>‚úÖ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è</p>
              <p>‚úÖ –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∏</p>
              <p>‚úÖ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç</p>
              <p>‚úÖ –ü—Ä–æ–≥–Ω–æ–∑—ã –∏ –≤—ã–≤–æ–¥—ã</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 