import { NextRequest, NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { chatId, message } = body;

    if (!chatId || !message) {
      return NextResponse.json(
        { success: false, error: 'ChatId and message are required' },
        { status: 400 }
      );
    }

    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram —Ç–æ–∫–µ–Ω–∞
    if (!process.env.TELEGRAM_BOT_TOKEN) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Telegram bot token not found',
          message: '–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env.local'
        },
        { status: 400 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞
    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const testMessage = `
ü§ñ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –∞–≥—Ä–µ–≥–∞—Ç–æ—Ä–∞</b>

${message}

üìÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date().toLocaleString('ru-RU')}
    `;

    await bot.sendMessage(chatId, testMessage, { parse_mode: 'HTML' });
    
    return NextResponse.json({
      success: true,
      data: {
        chatId,
        message: testMessage,
        sentAt: new Date().toISOString()
      },
      message: 'Telegram —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'
    });
  } catch (error) {
    console.error('Error testing Telegram:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error',
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ chatId'
      },
      { status: 500 }
    );
  }
} 