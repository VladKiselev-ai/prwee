import { NextRequest, NextResponse } from 'next/server';
import TelegramBot from 'node-telegram-bot-api';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { articles, type = 'digest' } = body;

    if (!process.env.TELEGRAM_BOT_TOKEN) {
      return NextResponse.json(
        { 
          success: false, 
          error: 'Telegram bot token not found',
          message: '–î–æ–±–∞–≤—å—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env.local'
        },
        { status: 400 }
      );
    }

    const chatId = '594250971'; // –ù–æ–≤—ã–π chatId
    const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

    let message = '';

    if (type === 'digest') {
      // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç
      const categories = Array.from(new Set(articles.map((article: any) => article.category?.name || '–û–±—â–µ–µ')));
      const importantArticles = articles.filter((article: any) => article.importance >= 7);
      const avgImportance = articles.reduce((sum: number, article: any) => sum + article.importance, 0) / articles.length;

      message = `
üì∞ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç –Ω–æ–≤–æ—Å—Ç–µ–π</b>

üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
‚Ä¢ –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${articles.length}
‚Ä¢ –í–∞–∂–Ω—ã—Ö: ${importantArticles.length}
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –≤–∞–∂–Ω–æ—Å—Ç—å: ${avgImportance.toFixed(1)}/10

üìã <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b>
${categories.map(cat => `‚Ä¢ ${cat}`).join('\n')}

üî• <b>–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏:</b>
${importantArticles.slice(0, 3).map((article: any, index: number) => 
  `${index + 1}. <a href="${article.url}">${article.title}</a>`
).join('\n')}

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –¥–∞–π–¥–∂–µ—Å—Ç –∑–∞–≤—Ç—Ä–∞ –≤ 9:00
      `;
    } else if (type === 'important') {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∂–Ω–æ–π –Ω–æ–≤–æ—Å—Ç–∏
      const article = articles[0];
      const sentimentEmoji = article.sentiment === 'positive' ? 'üòä' : 
                            article.sentiment === 'negative' ? 'üòî' : 'üòê';

      message = `
üö® <b>–í–ê–ñ–ù–ê–Ø –ù–û–í–û–°–¢–¨</b>

üì± <b>${article.title}</b>

üí° <b>–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</b> ${article.summary || article.content.substring(0, 150)}...

‚≠ê <b>–í–∞–∂–Ω–æ—Å—Ç—å:</b> ${article.importance}/10
${sentimentEmoji} <b>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</b> ${article.sentiment === 'positive' ? '–ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ' : 
                                      article.sentiment === 'negative' ? '–ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'}

üì∞ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> ${article.source.name}
üìÖ <b>–î–∞—Ç–∞:</b> ${new Date(article.publishedAt).toLocaleDateString('ru-RU')}

üîó <a href="${article.url}">–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é</a>
      `;
    } else {
      // –û–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      message = `
üì¢ <b>–ù–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏</b>

${articles.slice(0, 5).map((article: any, index: number) => 
  `${index + 1}. <a href="${article.url}">${article.title}</a> (‚≠ê${article.importance}/10)`
).join('\n')}

üìä –í—Å–µ–≥–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: ${articles.length}
      `;
    }

    await bot.sendMessage(chatId, message, { 
      parse_mode: 'HTML',
      disable_web_page_preview: true
    });
    
    return NextResponse.json({
      success: true,
      data: {
        chatId,
        type,
        articlesCount: articles.length,
        sentAt: new Date().toISOString()
      },
      message: 'Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!'
    });
  } catch (error) {
    console.error('Error sending Telegram notification:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Unknown error',
        message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ chatId'
      },
      { status: 500 }
    );
  }
} 